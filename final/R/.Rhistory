source("rule-model.R")
source("rule-model.R")
source("rule-model.R")
source("rule-model.R")
source("rule-model.R")
source("rule-model.R")
source("rule-model.R")
source("rule-model.R")
source("brplots.R")
??ellipse
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
modelData
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
babybr
babybr.means
source("brplots.R")
getwd()
setwd("../../../talks/job-talk/R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
source("brplots.R")
q()
>
options(continue = "  ")
options(continue = "+ ")
y.fit
lm.overfit
X
x
predict.lm(lm.overfit, Xmesh)
xmesh
dim(Xmesh)
length(xmesh)
predict
predict(lm.overfit, Xmesh)
dim(Xmesh)
dim(xmesh)
length(xmesh)
predict(lm.overfit, newdata = t(Xmesh))
predict(lm.overfit, newdata = Xmesh)
data.frame(Xmesh)
dim(Xmesh)
coef(lm.overfit)
head(Xmesh)
head(X)
Xmesh
head(Xmesh)
head(X)
coef(lm.overfit)
coef(lm.overfit)
dim(Xmesh)
Xmesh %*% coef(lm.overfit)
Xmesh %*% coef(lm.overfit)

. + 
)
head(X)
head(X[,1:3]
)
poly(x, degree = 2)
X
X
X@coefs
attr(X, "coefs")
lm.lin

. + 
)

. + 
warnings())
warnings()
lm()
lm(1 ~ 1)
Xmesh
length(models)
dim(Xmesh)
plot_train(order = 1, col = "blue")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off())
dev.off()
for(i in 1:20) {dev.off()}
dev.off()
plot_train(order = 1, col = "blue")
i
i
dev.off()
plot_train(order = 1, col = "blue")
plot_train(order = 2, col = "blue")
order
degree
dev.off()
dev.off()
head(Xmesh[, 1:2])
coef(models[2])
models
c(lm(1~1), numeric(0))
x <- c(lm(1~1), numeric(0))
length(x))
length(x)
y <- c(lm(1~1), numeric(0))
length(y)
y
rm(list = ls())
models
errors
errors
residuals(model[[1]])
residuals(models[[1]])
means
y1
plot(x, y1[1,])
plot(xmesh, y1[1,])
dev.off())
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
plot(xmesh, y1[1,])
plot(xmesh, y1[1,], type = "l")
plot(xmesh, y1[1,], type = "l", col = "forestgreen")
plot(xmesh, y1[1,], type = "l", col = solar["green"])
set_pars()
plot(xmesh, y1[1,], type = "l", col = solar["green"])
plot(xmesh, y1[2,], type = "l", col = solar["blue"])
plot(xmesh, y1[1,], type = "l", col = solar["green"])
lines(xmesh, y1[2,], type = "l", col = solar["blue"])

. + 

. + )
plot(xmesh, y1[1,], type = "l", col = solar["green"])
lines(xmesh, y1[2,], type = "l", col = solar["blue"])
lines(xmesh, y1[2,], type = "l", col = solar["blue"])
plot(xmesh, y1[1,], type = "l", col = solar["green"])
lines(xmesh, y1[2,], type = "l", col = solar["blue"])
lines(xmesh, y1[2,], type = "l", col = solar["blue"])
dev.off()
dev.off()
dev.off()

. + 
)
?mvrnorm
?mvrnorm
dev.off()
get_sigma <- function(x, l=1)
{
    Sigma <- matrix(rep(0, length(x)^2), nrow = length(x))
    for (i in 1:nrow(Sigma))
    {
        for (j in i:nrow(Sigma))
        {
            Sigma[i,j] <- Sigma[j,i] <- exp(-0.5 * (abs(x[i] - x[j])/l)^2)
        }
    }
    return(Sigma)
)
true.assignments
yk
y
assigments[[1]]
assignments[[1]]
y[assignments[[1]] == 1, ]
yk <- y[assignments[[1]] == 1, ]
apply(yk, 2, mean)
var(yk)
Sigma.post
rm(list = ls())
yk
dim(y)
dim(yk)
yk
y[assigments[[1]] == 1,]
y[assignments[[1]] == 1,]
y[assignments[[2]] == 1,]
y[assignments[[3]] == 1,]
yk
?as.matrix
yk
yk
Sigma.post
mleparams
yk
mlest(yk)
yk
var(yk)
yk
yk
yk
yk
dim(yk)
yk
yk[[1]]
apply(yk[[1]], 2, mean)
yk[[1]]
yk[[1]]
apply(yk[[1]], 2, mean)
devs
Sigma.hat
dim(Sigma.hat[[1]])
mu.post
Sigma_0
Sigma
xsubmesh
dim(Sigma)
dim(Sigma_0)
Sigma_0[xsubmesh]
Sigma_0[xsubmesh, xsubmesh]
Sigma[xsubmesh, xsubmesh]
ppp
rm(list = ls())
ppp
ppp
ppp
ppp
ppp
post.params
post.params$mu
post.params$Sigma[[1]]

+ + + + . + + . + 
post.params
group.trajs

. + + . + + . + 
)
group.trajs
xsubmesh
group.trajs
library(Mvnorm)
library(mvtnorm)
ll
warnings()
lik
lik
lik
lik
lik
lik
lik
post.params
assignments[[1]]
assignments[[3]]
centers
centers
centers
append(centers, 2)
centers
samp$centers
for(g in 1:length(samp$centers))
        {
            lines(
                xmesh[xsubmesh], samp$centers[[g]], lty = 2,
                col = traj.colors[g]
                )
        }
length(samp$centers)
samp$centers[[9]]
dev.off()
samp$centers
lik
assignments
 rm(list = ls())
y
nrow(y)
l
results
run_it_all(1)
run_it_all(2)
run_it_all(3)
run_it_all(4)
results
run_it_all(4)
run_it_all(4, 1)
run_it_all(4, 1)
run_it_all(4, 1)
run_it_all(4, 2)
run_it_all(3, 1)
run_it_all(3, 3)
results
results
results
results
results
results
results
run_it_all(4, 3)
run_it_all(3, 3)
results
run_it_all(3, 3)
results
results
results
plot_raw_data(xmesh, y)
plot_raw_data(xmesh, y)
results
results
run_it_all(3, 3)
results
plot_raw_data(xmesh, y)
results
results
results
results
results
for(j in 1:length(assignments))
{
    results <- append(results, run_it_all(j, 3))
}

results
results
results
results
results
results
results
run_it_all(2, 3)
results
plot_raw_data(xmesh, y)
results
results
results
plot_raw_data(xmesh, y)
xmesh
plot_raw_data(xmesh, y)
dev.off()
plot_raw_data(xmesh, y)
results
run_it_all(1, 3)
xmesh
y
dim(y)
y
sample_and_plot(10, y, assignments[[1]], Sigma_0, mu_0, Sigma, xsubmesh, 3)
compute_cluster_posterior(y[,xsubmesh], assignments[[1]], Sigma_0[xsubmesh,xsubmesh], mu_0[xsubmesh], Sigma[xsubmesh, xsubmesh])
compute_cluster_posterior(y[,xsubmesh], assignments[[2]], Sigma_0[xsubmesh,xsubmesh], mu_0[xsubmesh], Sigma[xsubmesh, xsubmesh])
plot_raw_data(xmesh, y)
params <- compute_cluster_posterior(y[,xsubmesh], assignments[[2]], Sigma_0[xsubmesh,xsubmesh], mu_0[xsubmesh], Sigma[xsubmesh, xsubmesh])
sample_ll(y[,xsubmesh], assignments[[2]], params, Sigma[xsubmesh, xsubmesh])
params
params <- compute_cluster_posterior(y[,xsubmesh], assignments[[2]], Sigma_0[xsubmesh,xsubmesh], mu_0[xsubmesh], Sigma[xsubmesh, xsubmesh])
params
sample_ll(y[,xsubmesh], assignments[[2]], params, Sigma[xsubmesh, xsubmesh])
x <- list(1,2,3)
append(x, 4)
rm(list = ls()))
rm(list = ls())
params <- compute_cluster_posterior(y[,xsubmesh], assignments[[2]], Sigma_0[xsubmesh,xsubmesh], mu_0[xsubmesh], Sigma[xsubmesh, xsubmesh])
params
mvrnorm(1, params$mu[[1]], params$Sigma[[1]])
centers <- list()
centers <- append(centers, mvrnorm(1, params$mu[[1]], params$Sigma[[1]]))
centers
plot_raw_data(xmesh, y)
results
plot_raw_data(xmesh, y)
results
plot_raw_data(xmesh, y)
run_it_all(1, 3)
run_it_all(2, 3)
run_it_all(3, 3)
run_it_all(2, 3)
run_it_all(3, 3)
results
results
results
results
run_it_all(2, 3)
results
results
results
results
results
results
results
plot_raw_data(xmesh, y)
plot_raw_data(xmesh, y)
par("fg")
is.null
is.null(NULL)
par("fg")
plot_raw_data(xmesh, y, traj.colors)
results
results
results
results
results
for(j in 1:length(assignments))
{
    results <- append(results, run_it_all(j, 3))
}
results
run_it_all(3, 3)
run_it_all(2, 3)
run_it_all(1, 3)
results
results
results
results
results
results
results
results
results
results
results
results
run_it_all(3, 3)
results
run_it_all(3, 3)
plot_raw_data(xmesh, y)
num.clusters
results
results
dev.off(which=)
dev.off()
dev.off()
length(xmesh)
length(y[assigments[[3]] == 2,])
length(y[assignments[[3]] == 2,])
dim(y)
assignments[[3]] == 2
dim(y[assignments[[3]] == 2,])
permute.plot(sleep$extra, sleep$group, c(1,2))
sleep
permute.plot(sleep$extra, sleep$group, c(1,2))
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
dev.off()
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
dev.off()
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "Extra Hours of Sleep")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "Extra Hours of Sleep", ylab = "")
permute.plot
permute.plot
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "Extra Hours of Sleep", ylab = "")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "Extra Hours of Sleep")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "Extra Hours of Sleep")
permute.plot(sleep$extra, sleep$group, c(1,2), xlab = "Extra Hours of Sleep", group.names = c("Control", "Experimental"))
pwd()
getwd()
ls "../fig"
dir("../fig")
dir("../fig/")
dir("..")
dev.off()
